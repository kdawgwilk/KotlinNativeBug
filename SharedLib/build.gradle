buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.2'
    }
}
plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.30'
    id 'org.jetbrains.kotlin.native.cocoapods' version '1.3.30'
}
repositories {
    google()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    mavenCentral()
}
group 'com.example'
version '0.0.1'

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
}

kotlin {
    android {
        publishLibraryVariants("release", "debug")
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework('SharedLib')
        }
    }
    sourceSets {
        commonMain.dependencies {
            implementation kotlin('stdlib-common')
        }
        commonTest.dependencies {
            implementation kotlin('test-common')
            implementation kotlin('test-annotations-common')
        }
        androidMain.dependencies {
            implementation 'com.facebook.react:react-native:+'
            implementation kotlin('stdlib')
        }
        androidTest.dependencies {
            implementation kotlin('test')
            implementation kotlin('test-junit')
        }
        iosMain {

        }
        iosTest {

        }
    }
    cocoapods {
        summary = "Shared library"
        homepage = 'homepage'
        license = 'license'

        pod 'React'
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').linkTaskName
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}

configurations {
    compileClasspath
}